@using WebMatrix.Data;
@using System.Web;
@using System.Web.Script.Serialization;


@{
    ViewBag.Title = "GEN Provider Directory";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@{
    var db = Database.Open("gen-provider-dbConnectionString");

    var queryLen = "select count(*) FROM Main_Database_For_Directory where ApprovedForDirectory = '1' and (StreetAddress != null or StreetAddress != '')";
    int num = db.QueryValue(queryLen);
    


    List<List<string>> locations = new List<List<string>>();

    string[] addresses1 = new string[num];
    string[] organization = new string[num];
    string[] twitter = new string[num];
    string[] types = new string[num];
    string[] phone = new string[num];
    string[] email = new string[num];
    string[] orgID = new string[num];

    var count = 0;
    //fix the length using query
    int[] id = new int[num];

    var idCount = 0;

    var ID = 0;

    var query = "Select distinct Organization, Twitter, StreetAddress, TypeOfOrganization, PhoneNumber, Email, OrgID FROM Main_Database_For_Directory where ApprovedForDirectory = '1' and (StreetAddress != null or StreetAddress != '')";

 }




<div id="map_canvas" style="height: 500px; border: 2px solid #3872ac;"></div>
<script>

@foreach (var row1 in db.Query(query))
{
    locations.Add(new List<string>());
    locations[count].Add(@row1.Organization);
    locations[count].Add(@row1.StreetAddress);
    locations[count].Add(@row1.Twitter);
    locations[count].Add(@row1.TypeOfOrganization);
    locations[count].Add(@row1.PhoneNumber);
    locations[count].Add(@row1.Email);
    locations[count].Add(@row1.OrgID.ToString());
    id[count] = row1.OrgID;

    //organization[count] = row1.Organization;
    //addresses1[count] = row1.StreetAddress;
    //twitter[count] = row1.Twitter;
    //types[count] = row1.TypeOfOrganization;
    //phone[count] = row1.PhoneNumber;
    //email[count] = row1.Email;
    orgID[count] = row1.OrgID.ToString();
    //id[count] = row1.OrgID;

    count++;

}

    //var locations = [
    //    ['Bondi Beach', -33.890542, 151.274856, 4],
    //    ['Coogee Beach', -33.923036, 151.259052, 5],
    //    ['Cronulla Beach', -34.028249, 151.157507, 3],
    //    ['Manly Beach', -33.80010128657071, 151.28747820854187, 2],
    //    ['Maroubra Beach', -33.950198, 151.259302, 1]
    //];
    @*var map;
    var markers = [];
    var geolat = [];
    var geolng = [];
    var geoLoc = [];
    var locations = @Html.Raw(Json.Encode(locations));
    //var bounds = new google.maps.LatLngBounds();


    function start() {
        map = new google.maps.Map(document.getElementById('map_canvas'), {
            zoom: 2,
            center: new google.maps.LatLng(0, 0),
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });
        var geocoder = new google.maps.Geocoder();

        var num_markers = locations.length;

        for (var i = 0; i < num_markers; i++) {
            geocodeAddress(geocoder, i);

        }

    }
    function geocodeAddress(geocoder, count) {
        var address = locations[count][1];
        var count1 = 0;

        geocoder.geocode({ 'address': address }, function (results, status) {
            if (status === 'OK') {
                geoLoc[count1] = results[0].geometry.location;


            } else {

                alert('Geocode was not successful for the following reason: ' + status);
            }
            count1++;
            if (count1 >= num_markers) {
                end(num_markers);
            }
        });
    }
    function end(num_markers) {


        for (var i = 0; i < num_markers; i++) {
            var contentString = "<div><h3>" + locations[i][0] + "</h3><h6>Type of organization: " + locations[i][3] + "</h6><p>" + locations[i][1] + "</p></div>";

            markers[i] = new google.maps.Marker({
                position: geoLoc[i],
                map: map,
                html: contentString,
                id: i,
            });
            //bounds.extend(marker.getPosition());
           // map.fitBounds(bounds);
            google.maps.event.addListener(markers[i], 'click', function () {
                var infowindow = new google.maps.InfoWindow({
                    id: this.id,
                    content: this.html,
                    position: this.getPosition()
                });
                google.maps.event.addListenerOnce(infowindow, 'closeclick', function () {
                    markers[this.id].setVisible(true);
                });
                this.setVisible(false);
                infowindow.open(map);
            });

        }
    }*@
    //google.maps.event.addDomListener(window, 'load', init);


//$(document).ready(function ()
    var geocoder;
    var map;
    var bounds = new google.maps.LatLngBounds();

    function start() {
        //var map;
        //var elevator;
        //var title1 = "";
        //var address1 = "";
        //var twitter1 = "";
        //var type1 = "";
        //var phone1 = "";
        //var email1 = "";
        //var id1 = "";

        //var bounds = new google.maps.LatLngBounds();

        //var organization = @Html.Raw(Json.Encode(organization));
        //var twitter = @Html.Raw(Json.Encode(twitter));
        //var type2 = @Html.Raw(Json.Encode(types));
        //var phone = @Html.Raw(Json.Encode(phone));
        //var email = @Html.Raw(Json.Encode(email));
        var orgID = @Html.Raw(Json.Encode(orgID));
        //var addresses = @Html.Raw(Json.Encode(addresses1));
        var locations1 = @Html.Raw(Json.Encode(locations));
        //var myOptions = {
        //    zoom: 2,
        //    center: new google.maps.LatLng(0, 0),
        //};
       // map = new google.maps.Map($('#map_canvas')[0], myOptions);

        map = new google.maps.Map(
            document.getElementById("map_canvas"), {
                center: new google.maps.LatLng(0,0),
                zoom: 2,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            });
        geocoder = new google.maps.Geocoder();

        /*for (i = 0; i < locations1.length; i++) {
            //setInterval(function () { 
                geocodeAddress(locations1, i);
            //}, 50);

           
        }*/
        var i = 0;
        function myLoop() {          
            setTimeout(function () {    
                geocodeAddress(locations1, i);         
                i++;                     
                if (i < locations1.length) {            
                    myLoop();             
                }                        
            }, 200)
        }

        myLoop(); 

    }
    google.maps.event.addDomListener(window, "load", start);

    function geocodeAddress(locations1, i) {
        var title = locations1[i][0];
        var address = locations1[i][1];
        var url = locations1[i][2];
        var phone = locations1[i][4];
        var type = locations1[i][3];
        var email = locations1[i][5];
        var id = locations1[i][6];
        //var id = orgId;
        geocoder.geocode({
            'address': locations1[i][1]
        },

            function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    var marker = new google.maps.Marker({
                        icon: 'http://maps.google.com/mapfiles/ms/icons/blue.png',
                        map: map,
                        position: results[0].geometry.location,
                        title: title,
                        animation: google.maps.Animation.DROP,
                        address: address,
                        type: type,
                        phone: phone,
                        email: email,
                        id: id,
                        url: url
                    })
                    infoWindow(marker, map, title, address, url, phone, type, email, id);
                    bounds.extend(marker.getPosition());
                    map.fitBounds(bounds);
                } else {
                    alert("geocode of " + address + " failed:" + status);
                }
            });
    }

    function infoWindow(marker, map, title, address, url, phone, type, email, id) {
        google.maps.event.addListener(marker, 'click', function () {
            var idNum = parseInt(id);
            var html = "<div><h3>" + title + "</h3><p>" + address + "<br></div><a href='" + url + "'>View location</a></p></div>";
            var html2 = "<div><h3>" + title + "</h3><h6>Type of organization: " + type + "</h6><p>" + address + "<br>" + phone + "<br>" + email + "</div><hr><a href='@Href("~/Display/Display?param1=" + id[idCount] )' class='btn btn-default'>See Details</a></p></div>";
            var html3 = "<div><h3>" + title + "</h3><h6>Type of organization: " + type + "</h6><p>" + address + "<br>" + phone + "<br>" + email + "</div><hr><a href='/Display/Display?param1=" + id + "' class='btn btn-default'>See Details</a></p></div>";

            iw = new google.maps.InfoWindow({
                content: html3,
                maxWidth: 350
            });


            iw.open(map, marker);
        });
       
    }

    function createMarker(results) {
        var marker = new google.maps.Marker({
            icon: 'http://maps.google.com/mapfiles/ms/icons/blue.png',
            map: map,
            position: results[0].geometry.location,
            title: title,
            animation: google.maps.Animation.DROP,
            address: address,
            type: type,
            phone: phone,
            email: email,
            id: id,
            url: url
        })
        bounds.extend(marker.getPosition());
        map.fitBounds(bounds);
        infoWindow(marker, map, title, address, url, phone, type, email, id);
        return marker;
    }



        //['Norway', '6727 N Yale St Portland OR', 'Africa', 'Asia', 'North America', 'South America'];

        //var j = 0;


        //var infowindow = new google.maps.InfoWindow({
        //    content: "holding..."
        //});
        //for(var x in locations1){
        //for (var x = 0; x < addresses.length; x++) {
    //    addresses.forEach(function (x) {
    //        $.getJSON('http://maps.googleapis.com/maps/api/geocode/json?address=' + x + '&sensor=false', null, function (data) {
    //            var p = data.results[0].geometry.location
    //            var latlng = new google.maps.LatLng(p.lat, p.lng);


    //            title1 = locations1[j][0];
    //            address1 = data.results[0].formatted_address;
    //                //locations1[j][1];
    //            twitter1 = twitter[j];
    //            type1 = locations1[j][3];
    //            phone1 = phone[j];
    //            email1 = email[j];
    //            id1 = orgID[j];

    //            var contentString = "<div><h3>" + title1 + "</h3><h6>Type of organization: " + type1 + "</h6><p>" + address1 + "</p></div>";

    //            var marker = new google.maps.Marker({
    //                position: latlng,
    //                map: map,
    //                title: title1,
    //                //info: contentString,
    //                animation: google.maps.Animation.DROP,
    //                clickable: true
    //                //infoWindowIndex : j
    //            });
    //            //marker.infowindow = infowindow;

    //            bounds.extend(marker.getPosition());
    //            map.fitBounds(bounds);

    //            marker.info = new google.maps.InfoWindow({
    //                content: contentString
    //            });


    //            // bindInfoWindow(marker, map, infowindow, contentString);
    //            google.maps.event.addListener(marker, 'click', function () {
    //                // this = marker
    //                var marker_map = this.getMap();
    //                this.info.open(marker_map, this);
    //                // this.info.open(marker_map, this);
    //                // Note: If you call open() without passing a marker, the InfoWindow will use the position specified upon construction through the InfoWindowOptions object literal.
    //            });

    //            //marker.addListener('click', function () {
    //            //    infowindow.setContent(this.contentString);
    //            //    return this.infowindow.open(map, this);
    //            //})

    //            //google.maps.event.addListener(marker, 'click', function () {
    //            //    infowindow.setContent(this.info);

    //            //    infowindow.open(map, this);
    //            //});

    //            j++;

    //        });

    //    });
    //}
    //function bindInfoWindow(marker, map, infowindow, description) {
    //    marker.addListener('click', function () {
    //        infowindow.setContent(description);
    //        infowindow.open(map, this);
    //    });
    //}

   // });



 </script>

@*<script>


    @foreach (var row1 in db.Query(query))
    {
        locations.Add(new List<string>());
        locations[count].Add(@row1.Organization);
        locations[count].Add(@row1.StreetAddress);
        locations[count].Add(@row1.Twitter);
        locations[count].Add(@row1.TypeOfOrganization);
        locations[count].Add(@row1.PhoneNumber);
        locations[count].Add(@row1.Email);
        locations[count].Add(@row1.OrgID.ToString());
        id[count] = row1.OrgID;
        count++;




    }

    var map;
    var geocoder;
    var bounds = new google.maps.LatLngBounds();

    function start() {
        var locations = @Html.Raw(Json.Encode(@locations));
        //window.setTimeout(initMap(locations), 4000);
        initMap(locations);
    }

    function initMap(locations) {
            map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 0, lng: 0 },
            zoom: 2
                        });
        geocoder = new google.maps.Geocoder();

        for (i = 0; i < locations.length; i++) {


            //window.setTimeout(geocodeAddress(locations, i), 10000);
            geocodeAddress(locations, i);
        }
    }
    
    google.maps.event.addDomListener(window, "load", initMap);


    function geocodeAddress(locations, i) {

        var title = "";
        if (locations[i][0] != null) {
            title = locations[i][0];
        }

        var address = "";
        if (locations[i][1] != null) {
            address = locations[i][1];
        }
        
        var url = "";
        if (locations[i][2] != null) {
            url = locations[i][2];
        }

        var type = "";
        if (locations[i][3] != null) {
            type = locations[i][3];
        }

        var phone = "";
        if (locations[i][4] != null) {
            phone = locations[i][4];
        }

        var email = "";
        if (locations[i][5] != null) {
            email = locations[i][5];
        }

        var id = "";
        if (locations[i][6] != null) {
            id = parseInt(locations[i][6]);
        }

        try {
            geocoder.geocode({
                'address': address
            }, function (results, status) {
                if (status === 'OK') {
                    var marker = new google.maps.Marker({
                        //icon: 'http://labs.google.com/ridefinder/images/mm_20_red.png',


                        map: map,
                        position: results[0].geometry.location,
                        title: title,
                        animation: google.maps.Animation.DROP


                    })
                    infoWindow(marker, map, title, address, url, type, phone, email, id, i);
                    bounds.extend(marker.getPosition());
                    map.fitBounds(bounds);
                } else {
                    alert("geocode of " + address + " failed:" + status);
                }
            });
        }
        catch (err)
        {
            alert("An address did not work.");
        }
    }

    function infoWindow(marker, map, title, address, url, type, phone, email, id, i) {
        google.maps.event.addListener(marker, 'click', function () {
           
            var html = "<div><h3>" + title + "</h3><h6>Type of organization: " + type + "</h6><p>" + address + "<br>" + phone + "<br>" + email + "</div><hr><a href='@Href("~/Display/Display?param1=" + id[idCount] )' class='btn btn-default'>See Details</a></p></div>";
                iw = new google.maps.InfoWindow({
                content: html,
                maxWidth: 350


            });
                iw.open(map, marker);
        });
        @idCount++;
    }*@


    @*//function createMarker(results) {
    //    var marker = new google.maps.Marker({
    //        icon: 'http://maps.google.com/mapfiles/ms/icons/blue.png',
    //        map: map,
    //        position: results[0].geometry.location,
    //        title: title,
    //        animation: google.maps.Animation.DROP,
    //        address: address,
    //        url: url
    //    })
    //    bounds.extend(marker.getPosition());
    //    map.fitBounds(bounds);
    //    infoWindow(marker, map, title, address, url);
    //    return marker;
    //}*@
@*</script>*@
@*<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCydyVvkTu1rv60sBjGKFcE4KvoXxR0gng&callback=start" async="" defer="defer" type="text/javascript"></script>*@
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCydyVvkTu1rv60sBjGKFcE4KvoXxR0gng&callback=start" async="" defer="defer" type="text/javascript"></script>
@*<script src="https://maps.googleapis.com/maps/api/js?key=AlzaSyCVyPZP3v5M7CCvctkfXHvZyGa1BzVroKk&callback=start" async="" defer="defer" type="text/javascript"></script>*@



@*<input type="submit" name="Go" value="Get Map" onclick="getMap()"/>
<div id="map_canvas" style="width:900px; height: 500px"></div>*@

@*<!DOCTYPE html>
<html>
<head>
    <title>Simple Map</title>
    <meta name="viewport" content="initial-scale=1.0">
    <meta charset="utf-8">
    <style>
        /* Always set the map height explicitly to define the size of the div
               * element that contains the map. */
        #map {
            height: 500px;
        }


        /* Optional: Makes the sample page fill the window. */
        html, body {
            height: 300px;
            margin: 0;
            padding: 0;
        }
        
    </style>
</head>
<body>
    <div id="map"></div>
    <script>
        var map;
        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: -34.397, lng: 150.644 },
                zoom: 8
            });
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AlzaSyBmLlngFyyvBSEun5UAwKMtD4o3s0Aetx0&callback=initMap"
              async defer></script>
</body>
</html>*@









@*<div class="jumbotron">
<h2>Map</h2>
<p class="lead">World map of all known providers.</p>

</div>*@

    @*<img src="http://maps-api-presentations.appspot.com/io2012-spatial/airports-size2.png" style="width: 100%; height:100%">*@





