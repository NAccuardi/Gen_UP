@using WebMatrix.Data;

@{
    ViewBag.Title = "GEN Provider Directory";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    var db = Database.Open("gen-provider-dbConnectionString");

    var queryLen = "select count(*) FROM Main_Database_For_Directory where ApprovedForDirectory = '1' and EditedOrg = 'false' and (StreetAddress != null or StreetAddress != '')";
    int num = db.QueryValue(queryLen);
    


    List<List<string>> locations = new List<List<string>>();

    string[] addresses1 = new string[num];
    string[] organization = new string[num];
    string[] twitter = new string[num];
    string[] types = new string[num];
    string[] phone = new string[num];
    string[] email = new string[num];
    string[] orgID = new string[num];

    var count = 0;
    //fix the length using query
    int[] id = new int[num];

    var idCount = 0;
    var query = "Select distinct Organization, Twitter, StreetAddress, TypeOfOrganization, PhoneNumber, Email, OrgID FROM Main_Database_For_Directory where ApprovedForDirectory = '1' and EditedOrg = 'false' and (StreetAddress != null or StreetAddress != '')";

 }

<div id="map_canvas" style="height: 500px; border: 2px solid #3872ac;"></div>
<script>

@foreach (var row1 in db.Query(query))
{
    locations.Add(new List<string>());
    locations[count].Add(@row1.Organization);
    locations[count].Add(@row1.StreetAddress);
    locations[count].Add(@row1.Twitter);
    locations[count].Add(@row1.TypeOfOrganization);
    locations[count].Add(@row1.PhoneNumber);
    locations[count].Add(@row1.Email);
    locations[count].Add(@row1.OrgID.ToString());
    id[count] = row1.OrgID;

    orgID[count] = row1.OrgID.ToString();

    count++;

}

    var geocoder;
    var map;
    var bounds = new google.maps.LatLngBounds();

    function start() {
        
        var orgID = @Html.Raw(Json.Encode(orgID));
        var locations1 = @Html.Raw(Json.Encode(locations));
       
        map = new google.maps.Map(
            document.getElementById("map_canvas"), {
                center: new google.maps.LatLng(0,0),
                zoom: 2,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            });
        geocoder = new google.maps.Geocoder();

        var i = 0;
        function myLoop() {          
            setTimeout(function () {    
                geocodeAddress(locations1, i);         
                i++;                     
                if (i < locations1.length) {            
                    myLoop();             
                }                        
            }, 200)
        }

        myLoop(); 

    }
    google.maps.event.addDomListener(window, "load", start);

    function geocodeAddress(locations1, i) {

        var title = locations1[i][0];
        var address = locations1[i][1];
        var url = locations1[i][2];
        var phone = locations1[i][4];
        var type = locations1[i][3];
        var email = locations1[i][5];
        var id = locations1[i][6];
        
        geocoder.geocode({
            'address': locations1[i][1]
        },

            function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    var marker = new google.maps.Marker({
                        icon: 'http://maps.google.com/mapfiles/ms/icons/blue.png',
                        map: map,
                        position: results[0].geometry.location,
                        title: title,
                        animation: google.maps.Animation.DROP,
                        address: address,
                        type: type,
                        phone: phone,
                        email: email,
                        id: id,
                        url: url
                    })
                    infoWindow(marker, map, title, address, url, phone, type, email, id);
                    bounds.extend(marker.getPosition());
                    map.fitBounds(bounds);
                } else {
                    alert("geocode of " + address + " failed:" + status);
                }
            });
    }

    function infoWindow(marker, map, title, address, url, phone, type, email, id) {
        google.maps.event.addListener(marker, 'click', function () {
            var idNum = parseInt(id);
            var html = "<div><h3>" + title + "</h3><p>" + address + "<br></div><a href='" + url + "'>View location</a></p></div>";
            var html2 = "<div><h3>" + title + "</h3><h6>Type of organization: " + type + "</h6><p>" + address + "<br>" + phone + "<br>" + email + "</div><hr><a href='@Href("~/Display/Display?param1=" + id[idCount] )' class='btn btn-default'>See Details</a></p></div>";
            var html3 = "<div><h3>" + title + "</h3><h6>Type of organization: " + type + "</h6><p>" + address + "<br>" + phone + "<br>" + email + "</div><hr><a href='/Display/Display?param1=" + id + "' class='btn btn-default'>See Details</a></p></div>";

            iw = new google.maps.InfoWindow({
                content: html3,
                maxWidth: 350
            });


            iw.open(map, marker);
        });
       
    }

    function createMarker(results) {
        var marker = new google.maps.Marker({
            icon: 'http://maps.google.com/mapfiles/ms/icons/blue.png',
            map: map,
            position: results[0].geometry.location,
            title: title,
            animation: google.maps.Animation.DROP,
            address: address,
            type: type,
            phone: phone,
            email: email,
            id: id,
            url: url
        })
        bounds.extend(marker.getPosition());
        map.fitBounds(bounds);
        infoWindow(marker, map, title, address, url, phone, type, email, id);
        return marker;
    }


 </script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCydyVvkTu1rv60sBjGKFcE4KvoXxR0gng&callback=start" async="" defer="defer" type="text/javascript"></script>

